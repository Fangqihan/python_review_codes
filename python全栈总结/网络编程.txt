网络基础
	应用软件  >>>  操作系统  >>> 硬件


	应用软件是运行在操作系统之上, 通过操作系统的借口来控制硬件(cpu,磁盘);
	

	过程:
		1. 客户端软件产生数据;
		2. 调用接口将数据拷贝到操作系统内存中;	
		3. 操作系统接收到数据后,按照客户端软件指定的协议对数据进行包装并调用网卡发送数据;
		4. 网络传输;
		5. 服务端操作系统接收到指令后,使用相同的协议从网卡中对数据进行拆包到内存中;
		6. 拷贝到服务端软件内存;
		
			
	数据传输五层包装协议:
		
		1. 物理层
			软件或服务端产生的底层数据,二进制数据;
			
		2. 数据链路层
			ETHERNET协议
				对二进制数据进行包装;
				一组电信号构成一个数据包,简称'帧';
				帧的组成:
					类似于快递的包裹:head相当于快递单, data相当于包裹本身;

					head:
						前6bytes: 	原地址
										MAC地址
										
						中间6bytes:	目标地址
										MAC地址
													
						最后6bytes:	描述传输内容,可以理解为传输的是一个文件:
										文件名称
											文件路径
										
										MD5
											作用是防止文件中途被篡改,保证传输的安全性;
									
										文件大小:
											防止粘包的产生;				
			
					data:
						真正意义是的包裹;
						每次传输的最大限制为1500bytes,若超过了则分片发送;
						只有当请求为POST方式时候才有;
			
			补充知识:
				MAC地址:
					Ethernet协议规定每个接入internet的设备必须具备MAC地址;
					每块网卡在出厂时候会被烧制上世界上独一无二的mac地址;
					12位16进制组成:
						前6:	厂家编号;
						后6:流水线编号;
				
				广播:
					理解: 局域网内所有的计算机都会接收到数据包,然后进行拆包,
						若发现mac的目标地址是自己,则进一步拆包,否则,丢弃;
					
					局限性: 仅限于局域网内部传输,若两个计算机不在一个局域网内则失效;
					
			
		3. 网络层
			IP协议
			作用: 定位局域网;
			
			一般采用ipv4版本,由32为二进制表示;
			
			范围及表现形式: ' 0.0.0.0 ~ 255.255.255.255 '
			
			子网掩码:
				意义: 若直接将' 192.168.1.0~255 '字段分配给某个计算机网络,默认可以支持255台主机, 但是若这个计算机网络
				没有255台计算机的话,就会造成资源浪费;
				将ip地址理解为姓名的话,但是不能确定姓名的分界点, 子网掩码的1和0的分界就相当于确定姓名的分界点;
					
								
				IP的基础上进一步缩小局域网;
					若一个局域网有几万台计算机的话,通过广播方式传播数据有可能造成瘫痪,所以要尽可能的缩小局域网范围;
					
				配合ip使用,表示ip的网络位 和 主机位,用以区分ip网段地址;
				
				例如: IP网段: 	127.168.1.0
					 子网掩码:	255.255.0.0 	对应的网段  127.168.0.0
					 子网掩码:	255.255.255.0	对应的网段  127.168.1.0
					 
					 子网掩码不同, 对应的ip地址段不同;
					 我们是先确定ip地址段,再进入对应的局域网进行网络传播;
					 
			分类:
				A类					
					
				B类
				
				C类:
					网络位: 3 bytes;
					
					主机位: 1 bytes;
					
					范围: ' 192.0.0.1 ~ 223.255.255.255;
				
				D类
			
		
		4. 传输层:
			端口port:
				作用:
				1. 操作系统会给进程分配协议端口,正整数表示, 大小在0-65535之间(其中0-1023为系统占用);
				
				2. 当目的主机接收到数据后,根据报文首部的目的端口号,把数据发送到相应的端口,而与此端口对应
					的那个进程会领取数据并等待下一组数据到来;
				
				综合: 端口可以理解是一个队,操作系统为各个进程分配了不同的队,数据包按照目的端口被推送到相应的队中,
					待进程领取数据;
				
			
			TCP协议:
				三次握手:
					采用cs架构;
					建立双向通讯管道,没有数据传输;
					
					cleint					 server
					1. client发送SYN=1,seq=x,syn(随机产生)到客户端;
					2. server接收到数据包, 返回 SYN=1,ACK=1,seq=y(随机产生),ack=x+1;
					3. client收到数据包,若序列号正确则建立连接,此时再向server返回ACK=1,ack=y+1,seq=x+1;
					
					可以理解为:
						1. 我想和你谈话(SYN);
						2. 我愿意和你谈话(SYN+ACK);
						3. 我们开始吧(ACK);
					
				四次挥手:
					断开管道连接;
					1. a向b发送断开链接请求, fin=x(随机生成);
					2. b收到后返回ack=x+1,同意断开;
					3. b发送fin=y到a,请求断开管道连接;
					4. a收到后同意并发送ack=y+1;
					
					为什么断开需要四次挥手?
						因为FIN不同于SYN,不是同步的,当b收到a的断开链接请求时候,不会马上发送fin断开请求;
							若b正在发送数据的话,只有当b将所有的数据发送完毕后才会发送fin报文请求;					
			
			UDP协议:
				无须建立双线管道;
				直接按照ip和端口发送数据;
				传输数据: ' sendto(data,(ip,port))
				接收数据: ' recvfrom(data, (ip,port))
			
			TCP 和 UDP 对比:
				tcp更安全可靠;
				udp效率更高;
			
			
			进阶:
				socket
					作用: 封装了tcp和udp协议,直接提供了接口方便使用;
					方法: 
						利用socket建立管道通讯实例:
							服务端:
								# 1. 创建服务端
								server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
								# 2. 绑定ip和端口
								server.bind((ip,port))
								# 3. 开始监听
								server.listen(5)
								
								# 4. 有客户端连接则生成套接字对象,没有则一直阻塞
								conn, addr = server.accept()
								while True:
									# 5. 开始接收数据	
									data = conn.recv(1024)
									if not data: break
									# 6. 向服务端返回数据
									conn.send(data.upper())
							
						
						
							客户端:
								# 1. 生成客户端
								client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
								# 2. 连接服务端, 建立双向管道
								client.connect(('127.0.0.1', 8082))
								# 3. 发送数据
								client.send(data)
						
					
					粘包问题:
						在不知道数据大小的情况下,接收端会按照指定的长度从系统内存中取出数据,若指定的长度小于数据长度,
							那么多余的数据会遗留在系统内存中, 下此再取数据时候会优先被取出;
						
						cleint软件(内存)		server软件(内存)
						
						操作系统(内存)		操作系统(内存)
							
						网卡					网卡
								Internet
						
						解决办法:
							确定发送数据的长度
							
							发送端:
								制作header:
									import struct
									
									def get_md5(data):
										"""生成密文"""
										m = hashlib.md5()
										m.update(data)
										return m.hexdigest()
									
									# 1. 生成报头	
									 header = {
										'data_type': '命令行执行结果',
										'data_md5': get_md5(data.encode('utf8')),
										'size': len(data.encode('utf8')),
									}
									
									# 2. 将header字典序列化成字符串的二进制格式
									header_bytes = json.dumps(header).encode('utf8')
									
									# 3. 将 header_bytes 固定成4bytes长度
									header_struct = struct.pack('i', len(header_bytes))
									
									# 发送									
									conn.send(header_struct)
									conn.send(header_bytes)
									conn.send(data)
									
								
							接收端:
								# 1. 获取header_struct对象
								header_struct = client.recv(4)
								
								# 2. 进行拆包,获取header_bytes的长度
								header_len = struct.unpack('i', header_struct)[0]
								
								# 3. 获取header序列化对象
								header_bytes = client.recv(header_len)
								
								# 4. 反序列化生成header
								header= json.loads(header_bytes.decode('utf8'))
								
								# 5. 获取data长度
								total_len = header.get('size')
								size = 0
								recv_data = ''
								while size < total_len:
										data = client.recv(1024).decode('utf8')
										size += len(data)
										recv_data += data
								
								
						突然断开连接:
							try:
								pass
							except ConnectionResetError:
								conn.close()
								

		5. 软件层
		
	

