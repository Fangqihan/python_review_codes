
web框架

	前端
		展示内容:
			浏览器接收后端返回的html文本(经过模板渲染)内容并读取到页面;
			
		
		与用户交互信息:
			本质上都是发送请求:
	
				表单提交
					必要参数: 
						
						action:
							提交的路径,在后台有对应的视图逻辑,接收用户产生的信息,若需要则调动数据库模块,取出相应的数据,渲染到
							模板中,并将其以html字符串的二进制格式返回给浏览器;
							
							若没有指定,则默认提交到当前页面url下;
							
							
						method:
							get: 
								默认方式;<input type='text'name=username>
								显示:url/?username=''&password=''
	
							post:
								除了用户上传的文件,其他数据封装在request.POST中,在后台通过字典形式取出;
								不论以表单提交或者ajax提交;
						
						
						难点:
							文件上传:	
								还要指定 传输数据处理方式: enctype="multipart/form-data"
								文件的二进制格式保存在request.FILES中,在后台直接以字典方式取出;	
								
								配置好media上传文件路径后,
								使用利用ajax登录就使用formdata\或者使用表单提交
									img = request.FILES.get('img')
									user = UerProfile.objects.create_user(
										username=username,
										password=password,
										img= img,
									)
									user.save()

						
							上传图片动态显示:
								...
							
							
							动态验证码:
								自定义验证码:
									...		
									
								运用第三方验证码模块:
									
									...
					
		
										
					
				ajax传输数据
					通过js或者jquery在当前页面获取局部的数据,将提交到后台,此过程不会阻塞浏览器进程;
						
					json简单介绍:
						javascript object notation缩写:
							基于javascript语言的轻量级数据交换格式;
							
							
						两种格式:
							1. {key:value, ...}:
								key是字符串,value可以为所有类型;
							
							2. [{k1:v1}, {k2:v2}, ...]
					
				
						类型:
							string, number, boolean, array, object, null
				
							
						作用: 
							可靠性传递数据,不改变其类型(常规数据类型,例如字典,列表);	
							dict >>> str >>> bytes  >>>  str >>> dict
								dumps()						loads()
				
				
						概念:
							字符串:
								双引号或单引号包括的字符;
					
							json字符串:
								符合json格式的字符串;	
							
							json对象:
								指符号json要求的js对象;
					
				
						在js中使用:
							例如:var obj = {
											key: value, 
											k2: [], 
											k3: {k4:v4,...}
										}
					
							查询:
								obj.key
					
							增加键值对或修改:
								obj.key = v2
					
							删除:
								delete obj.key
							
									
					ajax特点:			
						异步传输:不会阻塞进程;
					
						局部刷新:不会刷新整个页面;
					
					
					使用方式:
						常规方法:
							格式:
							
							    $('#submit_btn').click(function () {
									$.ajax({
									   url:'/login.html/',
									   type:"POST",
									   data: {'username':$('#username').val(), 
									   		'password': $("#password").val(),
											"csrfmiddlewaretoken":$('[name="csrfmiddlewaretoken"]').val()
									   },
									   success:function (data) {
											   alert(data)
										   }
										   
									})
								});
							
							
								跨域请求:
									中间件设置了csrf,使用post方法时候必须携带csrf键值对,否则不能通过;
									推荐自定制csrf键值对
								
								
								局限性:
									只能传输简单的数据;
									不能传输文件,传输到后台的是文件的路径;
								
						
						serialize方法:
							data: $('.post_form').serialize(),
							优点: 不用直接构造data;
							缺点: 不能传递文件;
						
						
						formdata:
							
							方法1:
						    $('#submit_btn').click(function () {
								 var form = new FormData();
								  form.append("username",$('#id_username').val());
								  form.append("password",$('#id_password').val());
								  form.append('csrfmiddlewaretoken', $('[name="csrfmiddlewaretoken"]').val());
								  
								  # 文件传输;
								  form.append('file',$('#upload_file')[0].files[0]);
								  
								 $.ajax({
									 url: '/login.html/',
									 type: 'post',
									 data: form,
									 processData: false,
									 contentType:false,
									 success: function (data) {
									 }

								 })
							 });
										
							方法2:
							 $('#submit_btn').click(function () {
							 
							 var form = new FormData($('#login_form')[0]);
							 	# 注意,必须传入DOM对象

							 $.ajax({
								 url: '/login.html/',
								 type: 'post',
								 data: form,
								 processData: false,
								 contentType:false,
								 success: function (data) {
									 alert(data)
									}

								 })
							 });
		
	
	后端:
		
		django声明周期:
		
			用户发出请求(url) >>>
				
				
		
		
			中间件 >>>

				例如:csrf中间件就是检测当请求方法是post时候必须携带csrf键值对
			
				自定制中间件:
			
		
			路由映射系统 >>>
				url 与 视图 一一对应;
				传过来的请求路径与urls中的正则从上至下匹配,若匹配到则直接调动对应的视图函数;
				
				关于路径是否以斜杠开头:
					<a href = '/login/'>
						# 以斜杠开始的路径, 直接当前域名后追加此路径
						
					href='login/'
						# 没有反斜杠,在当前url后追加此路径
					
					
				请求路径:
					前端向后端通过url路径传递参数:
						
						保存在GET中:
							表单提交:
								../?username='alex'&password='abc123':
									get请求;
									后端直接通过request.GET取出数据,很少用					
						
							<a>标签:
								<a href='?city="wuhan"&province="hubei"'></a>
								可以作为分类条件,由后台接收;
						
						视图函数形参接收:
							
							django2.0改进后,更方便,不用指定^和$等;
							
							<a href='/test/1/'></a>
							此处的数字 1 可以在 后台作为参数接收;
							路由配置:
								
								path("test/<int:index>/", views.test),
								若传输的是str类型:则直接改成<str:index>即可;
							
							
							1.x版本:
								test\(?P<year>\d+)\
						
				
				命名:
					name:
						可以在模板中调用{% url 'name' args %}
					
					namespace:
						在include中使用;
							初步匹配后进入include中的app的urls进一步匹配;
							
							在利用模板语言标签{% url 'namespace: name' %}可以调用;		
					
						保证url的唯一性;
						
					
			视图:
				函数:
					两种请求方式:
						get
						post
					
					三种方法:
						render(request, 'index.html', {从数据库取出的数据,})
							1. 取出对应的模板;
							
							2. 从数据库中取出数据;
							
							3. 将数据渲染到模板中:
								模板有自己的语法
						
						HttpResponse('str')
							返回固定字符串,若为标签,页面亦可以识别;
						
						
						redirect('url')
							参数是url,重新到路由配置下匹配,并进入视图函数;
							与render不同的是当前的url也会随之改变;
							
				
				CBV模型:
					...
					
			
			模板:
				从数据库中取出数据渲染到模板中;
				从数据库中取出需要的数据并放进上下文字典中;
				
				变量:
					语法: {{ book }}	
					一般是以字典形式放在上下文中,{'book', book_obj}
					查询语法:
						# 若后端传入的集合为列表或者元祖,那么可以根据索引取出元素,
						{{ iterable.0 }}
						
						
						# 若为字典
						{{ dict.key}}
						
						
						# 若为类对象
						{{ book.index.author}}
					
					
					
				标签:
					语法: {%  %}
					
					循环:
						{% for item in item_list %}
							{{ item.attr}}
							
						{% end for %}
						
					
					分支判断:
						
						{% if .. %}
							...
						
						{% else %}
							...
							
						{% endif %}
					
				
				内置过滤器:
					
					{{ name|filter:arg}}
					
					
					常用的:
						safe:
							从后端返回的字符串django默认只能以string格式识别;
							{{html_str|safe}}:可以识别标签文本,并展示在页面上;
						
						
						slice:
							{{html_str|slice:10}}: 返回前10个元素;
						
						
						truncatechars:
							语法:{{str|truncatechars:'int'}};
							截断字符,超过部分用...取代;
				
				
				自定义过滤器:
					
					无参数:
						    # 1. 生成注册类
							from django import template
							register = template.Library()
		
							# 2. 定义过滤器并注册
							@register.filter
							def square(value):
								try:
									return int(value)**2
								except:
									return '输入必须为数字'	
						
					
					有参数:
						
						{{ html_str|add:"11" }}
							# 传输参数
							
						
						@register.filter
						def add(value, arg):
							try:
								return int(value)+int(arg)*10

							except:
								return '输入必须为数字'
				
				
				
				自定义标签:
					
					在后端定义好标签函数, 也和自定义过滤器放在一起;
						from django import template
						from django.utils.safestring import mark_safe

						register = template.Library()

						@register.simple_tag
						def get_html(s1, s2):
							html = mark_safe('<h1>标题1{0}</h1><h2>标题2{1}</h2>'.format(s1, s2))
							return html

					
					在前端直接引用:
						{% load my_tag%}
										
						{% tag_name arg1 arg2 %}
					
					
					使用场景:	
						在后端可以现在后台自定义标签中将将要展现的内容制作成标签文本格式;
						在前端直接调用标签语言就可以呈现内容;
					
				
				模板继承:
					若多个模板存在共同部分,可以应用模板继承,减少重用代码;	
	
					首部:
						{% extends 'index.html' %}
				
					在有区别的需要自定的标签:
						
						1. 在基模板中先预先定义好可能不同的标签:
							{% block name %}...{% end block%}				
						
						2. 然后子模板中直接在标签中填充内容即可;
				
			
			model:
				
				准备:
					1. 在终端创建数据库:
					
					2. 在setting中配置连接数据:
					   
					3. 在app的init文件中配置,本身就是通过pymysql对数据库进行操作:
							import pymysql
							pymysql.install_as_MySQLdb()
						
						
					4. 在model中创建模型;
					
					
					5. 数据迁移:
						python manage.py makemigrations
						python manage.py migrate
					
					
					6. 生成表
						django自带的表:
							session表
							auth权限表
							迁移记录表
						
						model用户新建的表:
							表名: app_class_name
						
				
				以类的方式创建和保存数据;
				
				数据操作:
					
					创建表结构:
						在model文件中以类的形式创建;
						
						字段名称  类型 约束
						name int primary key auto_increment
						
						类型:
							charfield
							
							intrergerfield
							
							filefield
								upload_to = 'user/%Y/%m',
								# 保存在文件夹 user/年份/月份/...下;
								
							imgfield
								...
							
							emailfield
								...
							
							textField
								...
							
							datetime(
								
							)
								
									
						类型作用:
							自带检测功能,报错提醒;
							
							在admin添加记录时候自动截断:
								例如:限制最大长度,那么只取最大长度的字符串;
							


						约束:
							id:
							
								默认以id作为primary key,可以不指定id,django默认创建;
								
							choices:
								多选一
								
							
							表关系:
								建立表之间的关系后方便跨表查询操作;
								
								分类:
									
									一一对应:
										oneToOneField()
										
									一多对应:
										ForeignKey()
								
									多多对应:
										ManyToManyField(table_name)
										指定后,django默认创建第三张表格;
										
									
									多表查询:
														
							
						配置上传文件路径:
							见blog
						

						注册model
							from django.contrib import admin
							from app.models import Book
							 
							# Register your models here.
							admin.site.register(Book)
						
							可以在admin后台对表进行记录操作;
							
							
						
						admin相关:
							修改显示表名:
								def __str__:	
									return self.name
									
							修改显示的字段名:
								verbose_name = ''
								
							增加显示字段:
								# admin.py
								from django.contrib import admin
								from blog.models import Blog
								  
								#Blog模型的管理器
								class BlogAdmin(admin.ModelAdmin):
									list_display=('id', 'caption', 'author', 'publish_time')
									 
								#在admin中注册绑定
								admin.site.register(Blog, BlogAdmin)
						
						
						修改表名:
							class Meta:
								db_table = 'new_name'
								
					
					增加记录:
						实例化并赋值, 随后save();
							
							# 方法1
							book = Book(**kwargs)
							book.save()
							
							# 方法2
							Book.create(**kwargs)
							
						
						
					删记录:
						
						Book.objects.filter(title='').delete()
						
							
					改记录:
						方法1:
							Book.objects.filter(title='t1').update(title='t2')
					
						方法2:
							b = Book.objects.get('')
							b.title = ''
							b.save()
					
					
					单表查询:
						# 查询所有
						book.objects.all
							
							# 获取个数
							.count
								
						# 条件查询,以query_set格式返回,
						.filter()	
						
						
						# 查询除满足此条件之外的
						.exclude()
						
							
							条件:
								只针对int类型字段:
									大于
										 filter(id__bt=10)
											# id大于10
								
									小于
										id__lt=10
							
								
								对于char类型字段:
									title_startwith('')
									
									title_contains('')
									
									endwith('')
									
									orderby('-id')  
										# 降序列
									
									orderby('id')  
										# 升序
									
									切片操作:
										[start_index, end_index]
									

						
						.get()
							# 有就返回首个,没有报错;
					
								
						# 只取某些字段
						.only('id', 'title')	
						
						
						# 每一行记录为一个字典,整体是list列表;
						.values('id', 'title')
						
						
						# 每一行记录的为一个元祖,整体是list列表;
						.value_list('',...)
						
						
						# 分组annotate
						ret = Book.objects.values('category_title').annotate(count=Count('id')
							avg_price = Avg('price')
						)
						
							结果 <QuerySet [{'count': 3, 'avg_price': 59.0, 'category__title': '历史'}, 
							{'count': 2, 'avg_price': 55.0, 'category__title': '小说'}]>
						
						
						# 聚合函数aggregate
						ret = Book.objects.aggregate(count=Count('id'), avg_price= Avg('price'))
						结果 {'avg_price': 57.4, 'c': 5}
						
						
						
						# 取出属性
						利用对象的方式
						b = Book.objects.get(id=1)
						b.title
						
						
						# Q查询
							多条件筛选;
							
							与
								&
								filter(Q(...)&Q(...))
						
							或
								|
							
							非
								~

						
						# F查询
							针对同一条记录的两个字段进行比较或操作;
							例如:
								Book.objects.all().update(price=F('price')+100)
									
						
						
					连表查询:
						
						双下划线查询:
						
							# 可以通过表之间的关系进行连表筛选;
							filter(cate__title='')
								# 通过当前表的cate关联主表的title字段进行筛选;


	数据库:
		保存用户产生的数据;
		连接mysql数据库步骤:
			
			1. 首先在app的init文件:
				# 本质上是通过pymsql模块对数据库进行操作的
				import pymysql
				pymysql.install_as_MySQLdb()
			
			
			2. 在配置文件配置:
				# 注意必须先创建对应的数据库
			
				DATABASES = {
					'default': {
						'ENGINE': 'django.db.backends.mysql',   # 数据库引擎
						'NAME': 'db_pro',       # 你要存储数据的库名，事先要创建之
						'USER': 'root',         # 数据库用户名
						'PASSWORD': 'abc123',     # 密码
						'HOST': 'localhost',    # 主机
						'PORT': '3306',         # 数据库使用的端口
					}
				}	


django命令:

	创建项目: 
		django-admin.py startproject pro_name
	
	创建应用:	
		python manage.py startapp appname

		
	
	





	

		
	
	
	
	






