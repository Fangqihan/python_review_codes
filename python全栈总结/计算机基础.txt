计算机语言分类:

	机器语言:
		底层语言
		底层语言
		运行速度最快
		掌握难度大
	
	
	汇编语言:
		偏底层
		除了二进制外增加字符
		难度也比较大
		运行速度仅次于机器语言
		
	
	高级语言:
	  '看不见机器的硬件结构',但是一些高级语言提供了与汇编语言的调用接口;
	  能将许多先关的机器指令整合成单条指令,简化指令;
	
		编译型语言:
			1. 预编译:
				源代码写好后,在执行之前,编译器直接将源代码编译成 机器码,只编译一次;
				编译的时候根据对应的运行环境生成机器码,系统环境不同,编译后的可执行文件也不同;
			2. 链接:
				把各个模块的机器码和依赖库串联起来生成 可执行文件;
			
			优点: 执行效率高;
			缺点: 跨平台型差, 开发效率低(修改代码需要重新进行预编译);
			代表语言: c,c++,siwft,
				
				
		解释型语言:
			不需要编译;
			只在运行程序的时候翻译成机器语言;
			每运行一次就翻译一次;
			
			优点: 跨平台型好(前提是安装解释器), 开发效率高(修改代码直接修改);
			缺点: 执行效率低(每次运行之前都需要编译一次);
			代表语言: javascript, python, php, perl;


		混合型语言(属于解释性语言):
			字节码(Bytecode): 一种包含执行程序、由一序列 op 代码/数据对 组成的二进制文件.中间代码;
			编译器先将源码编译成字节码,特定平台上的虚拟机器将字节码 转译 成可直接执行的指令;
			代表语言: java	
		
		
	动态语言和静态语言
	动态语言:
		在运行时候可以改变其结构的语言;
	  	
	  	
	静态语言:
		与动态语言相反;
	  
	  
	 
	动态类型语言和静态类型语言
	动态类型语言:
		只在运行期间才做类型检查的语言;
		例如: python, javascript, php, ruby, swift
	
	静态类型语言:
		在编译前或者说在运行前确定数据类型;
		例如: java, C, C++, C#
	
	
	
	强类型语言和弱类型语言
	强类型语言:
		一旦一个变量被指定了某个数据类型,如果不经过转换,那么它就永远是这个数据类型;
		例如: java,C#,python,ruby
		
	弱类型语言:
		数据类型可以被忽略;
		一个变量可以赋不同数据类型的值,一旦给一个整型变量a赋一个字符串值，那么a就变成字符类型。
		例如: javascript,php




编码:
	要解决的主要问题是将文字转换成二进制代码；
	字符 >> 编译 >> 十进制(可查看) >> 二进制  >> 解码 >> 字符
	
	ascii:
		只适合英文；
		一个字节，最多表示256个字符；
		可表示字符:0-9 A-Z a-z 加上一些常见的符号;
		例如:字符'a' >> 97 >> 00110001 
			1	  1	  1	  1	  1	  1	 1	 1
		   256	 128  64  32  16  8	 4	 1
		
	gbk:
		可以表示中文；
		两个字节表示；
		但是，每个国家都存在编译自己语言的编码，没有统一起来；
		
	
	unicode:
		两个字节表示；
		把所有的语言统一到一套编码里；
		
		若表示ascii原本只需要一个字节可以表示现在需要２bytes,在存储和传输过程就出现了资源浪费;
		
		utf-8:
			保留ascii编码,在ascii编码表示范围内的仍然使用ascii格式编码;
			中文: 3bytes;
		
		
python2 和 python3的区别
	
	默认编码:
		python2: ascii;
		python3: utf8;





		
