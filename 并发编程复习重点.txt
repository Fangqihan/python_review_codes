计算机组成：
	硬件：cpu、硬盘、内存、IO设备（键盘、鼠标、显示器)...，只能识别二进制数据。
	操作系统：将控制硬件的程序封装起来，提供接口方便调用。
	app：运行在操作系统之上的可以开发的应用软件。


程序、进程、线程、协程的区别？
	一个app/软件 就是一个程序，启动一个应用可能会开启多个进程，每个进程内部可能会有多个线程。
	线程是CPU上最小的的执行单位，且线程共享当前进程的内存空间。
	开启进程开销较大（需要开辟独立的内存空间）。
	协程是微线程，是用户可以控制切换的。


对于计算型任务启动多进程，对于IO型号任务启动多线程？
	计算密集型：cpu利用率非常高，应该减少切换程序开销；
	IO密集型：99%的时间花费在程序切换上。


GIL锁？
	Global Interpreter Lock，全局解释器锁。保证每个进程中同一时刻只有一个线程被CPU执行。
	所以对于单核而言，多线程只是并发，而非并行。
	每个进程有各自独立的GIL，互不干扰，多CPU情况下能实现真正意义上的并行。
	步骤：
		1、线程1拿到当前进程的GIL锁；
		2、cpu执行线程；
		3、线程1释放GIL锁；

	参考：https://www.cnblogs.com/lovychen/p/6478127.html



进程间实现数据共享？
	from multiprocessing import Queue,Manager,Pipe
	
	Queue：
		q=Queue()
		队列，put()、get()
	
	Pipe:
		主进程和子进程之间可以实现收发消息。
		father_conn,son_conn=Pipe()

	Manager：
		with Manager() as manager:
        	D=manager.dict() # 生成一个字典，可在多进程间共享和传递
        	L=manager.list() # 生成一个列表












    

