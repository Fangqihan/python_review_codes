操作系统
	是什么?
		协调、管理和控制计算机硬件和软件资源的控制程序。
		本身也是软件，但是不能随意更改，而且是一个大型，长寿且复杂的软件。
	
	有什么作用?
		1. 封装硬件复杂的硬件接口,运行时调用接口就可以调用相应的硬件服务;
		
		2. 管理调度进程,使进程对cpu的竞争变得有序;
			收回cpu权限的情况：
				1. 给每个进程分配运行时间,操作系统就收回权限分配给其他进程;
				2. 遇到io阻塞也会直接收取权限;
	
	软件在操作系统上的执行流程:
		1. 双击可执行文件;
		2. 获取软件在硬盘上的存储地址;
		3. 操作系统将数据读进内存;
		4. 交给cpu执行;	
	
	发展：
		一次运行一个软件，　一个个输入和输出；
		
		批处理系统：　一大波输入和输出，　一次运行一个软件，但是运行顺序不好控制；　
		
		多道技术(单cpu):
			多道值得是多个程序;
			功能:
				空间复用：
					每个进程都有独立的内存空间，互不干涉；
					
				时间复用：
					当一个程序遇到IO阻塞, cpu会切换到其他的程序就行运行;
	

进程
	定义:
		正在执行的一个过程或者任务;
		程序: 仅仅指的是一堆代码而已;
	特点:
		有独立的内存空间,所以进程之间不能直接空间数据;
		进程间通讯:
			管道
				基于cs架构;
				
			queue队列
				from multiprocessing import Queue
				q = Queue(maxsize)
				q.put(obj)  	# 将数据放入队列q
				ret = q.get()  	# 从队列q中获取数据
				
				q.empty()	
					#  当队列没有数据时候, 若此时再取数据, 那么该进程会直接阻塞;
				
				q.full()
					# 当队列满员时,若此时再存入数, 那么该进程也会阻塞
				
			升级版队列:
				joinableQueue
					q.taskdone()和q.get()必须是一一对应;
					
					q.join(): 
						一直阻塞,知道q为空;

	
	进程状态:
		 1. 阻塞状态(IO阻塞)
		 2. 运行状态
		 3. 就绪状态
		

	开启进程:
		import multiprocessing
		import os

		def talk(name):
			print('子进程<%s> %s is talking' % (os.getpid(), name))

		if __name__ == '__main__':
			# 1. 创建子进程
			p = multiprocessing.Process(target=talk, args=('alex',))
			# 2. 启动子进程
			p.start()
			print('主进程<%s>' % os.getpid())	
		
		
	Process模块:
		方法:
			join(): 
				主进程会一直阻塞直到所有子进程运行完毕再继续往下执行;
			
			daemon():
				设置子进程为进程,如此, 主进程运行完毕后会直接回收子进程的内存;
				
			terminate():
				直接回收子进程资源;
			
			is_alive():
				判断进程是否在运行;	
			
			start():
				启动进程, 直接执行target对应的程序, 且传入参数,
	
	互斥锁lock:
		当两个或多个进程需要修改同一个文件,此时应该用互斥锁;
		
		from multiprocessing import Lock
		lock = Lock()
		
		# 锁住当前进程
		lock.acquire()		
		
		# 释放当前进程
		lock.release()
				
				
				
				
		
线程	
	定义: 
		开启一个进程时, 一般会开启多个线程;
		一个进程下的多个线程共享进程的内存空间;
		开启线程比开启进程开销更小;	
	
		
	执行方式:
		并发执行, 来回切换
	
		
	开启线程:
	
		from threading import Thread
		t = Thread(target=say_hi, args=('alex',))
    	t.start()
	
	方法属性:
		join():
			同进程,主线程一直阻塞知道子线程运行完毕;
		
		daemon():
			同进程, 守护线程会在主线程运行完毕销毁;
			
			进程和线程运行结束的区别:
				进程: 
					主进程代码执行到末尾就算运行结束,此时回收守护资源;
				
				线程:
					所有非守护子线程运行完毕才算运行结束,此时回守护线程	
			
	互斥锁:
		功能同进程;
	
	
	
	全局解释锁GIL:
		
		代码执行过程:
			1. 子线程先拿到用户代码执行权限;
			2. 再去解释器拿解释器代码的执行权限;
			3. 拿到解释器权限后将用户代码作为参数传递给解释器,由解释器执行用户代码;
		
		同一个时刻同一个进程内只有一个线程被执行;
		
		多线程用于IO密集型,例如socket,爬虫,web
		多进程用户计算密集型,例如金融分析;
		
		
	递归锁Rlock
		
		可以被同一个线程获取多次,每被获取一次,内置计数器加1,在此期间,其他线程不能获取,知道计数器为0;
		
		
		
	信号量semaphore
		本质: 是一把锁,但是可以允许设定最大值,
			例如:s_lock = Semaphore(5), 可以允许最多同时被5个线程抢到并执行;相比与互斥所,同时只能同时只能有一个线程
			抢到并执行;
		
		工作原理: 
			内置计数器counter, 每被acquire()一次, counter -= 1, 直到为0,则不能被获取, 
			相反, release()一次,counter+=1;
		
	
	
	event信号;
		线程之间根据event对象的状态来执行,其他线程也可以设置event对象的状态;
		
		event = Event()  	# 实例化生成event对象
		event.is_set()		# 返回boolean,判断event是否为True
		event.set()			# 设置event为True
		
	
	
	定时器:
		
		from threading import Timer

		def f1():
			print('hello world')

		t = Timer(3, f1)	#　传入延迟时间和执行的函数
		t.start()			#　开始计时
		
		t.cancel()			#  取消定时
	
	
	
	线程queue
		同进程的Queue类似，可以实现线程之间安全通讯；
		
		创建队列：
			import queue
			q = queue.Queue(maxsize=3)
			
			q.put()
			q.get()
			
		queue.Queue()为先进先出;
		queue模块下的 LifoQueue为后进先出
	
	
	
	线程池和进程池
		限定同时运行的最大线程和进程个数;
		
		不是传统意义上的开启线程和进程
		
		from concurrent.futures import ThreadPoolExecutor
		pool = ThreadPoolExecutor(10)		
		pool.submit(func, *args)  # 此时会立即创建并启动线程
		
		
		pool存在返回值,ret = pool.result()
		
		# 先启动子线程或者进程执行func程序并取得future对象在将其再传给func1函数, 异步调用,不会阻塞当前线程
		pool.submit(func, *args).add_done_callback(func1)
		
	
	
	 协程:
	 	单线程下实现实现并发效果;
	 		当一个任务遇到阻塞,会自动切换到其他任务去执行;
	 	
	 	可以理解为伪线程
	 	
	 	开启方式:
	 		from gevent import monkey
			monkey.patch_all()  # 此时就可以检测所有的内置的I/O阻塞了
			import gevent
	 		g = gevent.spawn(func, 'alex')  # 传入执行的函数和参数立即启动协程
	 		
	 	
	 	
	 	IO模型
	 		两个过程:
	 			1. 等待数据;  
 				2. 将数据从系统内存拷贝到用户进程中;
	 		
	 		阻塞IO
	 			在两个阶段都会阻塞;
	 			socket的accept和recv接口都是阻塞型接口,当应用调用接口后,若系统内存中没有对应的数据,则会一直阻塞;
	 		
			非阻塞IO
				socket的接口可以被设置成非阻塞类型;
				当应用调用接口后,无论数据有准备好,都会返回,只是若没有准备好,返回的是BlockingIOError, 若利用异常接收,
				则会出现轮询,不断循重复向系统内存询问;
				
				不被推荐:
					cpu占用率过高,且大部分都是在做无用功!(给系统一种一直在运行的错觉);
					相应不够及时,例如:若中途即使有客户端连接也不能马上切换到accept;			
					
			多路复用
				利用select监听多个接口accept,recv,send;
				单线程下实现监听多个客户端;
				
				1. 传统方法:每进来一个IO流会分配一个新的进程管理;
				2. 多路复用:单个线程,通过记录每个IO流的状态来同时管理多个IO流;
				
			异步IO
				类似与多路复用,但是不同的是当数据准备好后系统会发送通知信号!





