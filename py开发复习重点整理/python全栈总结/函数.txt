什么是变量?
	命令: a = 1
	解释器会创建整形1和变量a,并把a指向1;
	整形1也可以是各种类型的数据;


什么是函数?
	def 函数名(若有参数):
		代码
		return None\任意对象

怎么使用?
	 函数名(若有参数)


作用?
	整合代码;
	方便使用;
	

函数名命名:
	命名要有意义;
	常规是小写;
	单词间可以使用下划线隔开;
	避免与内置函数重名;
	

命名空间:
	存放变量名和值对应关系的字典;
	
	局部命名空间locals():
		函数内命名空间一般作用范围仅限于函数内部;
			若声明关键字global,可以修改函数外部的变量值;
				
	全局命名空间globals():
		最外层定义的变量;
	


参数:

	位置参数
		格式: (x, y);
		传入值的时候必须格外注意,因为实参和形参一一对应关系;
		
	关键字参数
		格式: (x=1, y=2);
		有默认值,若没有传入参数使用默认参数;
		关键字参数必须放在位置参数后;
		
	
	可变参数
		当不知道要传入多少个参数时候,可以使用可变参数;

		*args: 通用名称
			接收所有的位置实参;
			将传入的参数整合成元祖形式;	
		

		**kwargs: 通用名称
			接收所有的关键字实参;
			整合成字典格式;	
	

闭包:
		


装饰器函数:
	作用: 不修改函数的前提下扩展函数的功能;
	
	前提条件:
		1. 嵌套函数;
		2. 外层函数返回内层函数名;
		3. 内层函数使用外层函数传入的函数;
		
	
	理解:
		
		def outer(func):
			'''装饰器函数'''
			print('outer <%s>' % locals())

			def inner():
				print('inner <%s>' % locals())
				return func()

			return inner


		@outer
		def login():
			print('登录')

		login()

		'''
		执行步骤:
		
		调用前执行:(f可以理解为中间函数)
		1. login = outer(login), 先执行等号右侧
		2. login = inner
		
		调用后执行:
		3. login() >> inner()
		4. 返回return login()
		''' 		


迭代器:
	
	可迭代对象:
		可以使用for循环的对象都是可迭代对象;
	
		常见的有string, list, tuple, dict
	
	生成器:
		创建:
			解析方式:
				类似与列表,讲中括号换成圆括号;
		
			函数方式:
			
				def my_generator():
					for i in range(10):
						yield i

				g = my_generator()
			
			协程:
				利用生成器函数的yield可以接收send发送的参数














  
